load("@rules_java//java:defs.bzl", "java_binary")
load("@rules_kotlin//kotlin:jvm.bzl", "kt_jvm_library")
load("@rules_jvm//:jvm.bzl", "jvm_import")
load("//:src/jvm-args.bzl", "get_jvm_flags")

kt_jvm_library(
  name = "jvm-inc-builder-lib",
  srcs = glob(
      [
          "src/**/*.kt",
          "src/**/*.java",
      ],
      allow_empty = True,
  ),
  kotlinc_opts = "//:rules_jvm_bootstrap_kotlinc_options",
  #module_name = "intellij.tools.build.bazel.jvmIncBuilder",
  visibility = ["//visibility:public"],
  # buildifier: leave-alone
  deps = [
    "//dependency-graph",
    "//jps-builders-6:build-javac-rt",
    "//:jps-javac-extension",
    "//src/worker-framework",
    "//src/worker-util",
    "//:annotations",
    "//:h2-mvstore",
    "//:hash4j",
    "//:asm-all",
    "//:kotlin-metadata",
    "//:caffeine",
    "//:intellij-deps-fastutil",
    "//:qdox",
    "patched-kotlin-compiler-for-bazel",
    "//:kotlin-compose-compiler-plugin",
    "//:kotlin-serialization-compiler-plugin",
    "//:jps", # temporary dep for instrumentation-util and instrumenters, must be the last dep in classpath
  ]
)

java_binary(
    name = "jvm-inc-builder",
    jvm_flags = get_jvm_flags([
        "-Dkotlin.environment.keepalive=true",
        "-XX:+HeapDumpOnOutOfMemoryError",
    ]),
    main_class = "com.intellij.tools.build.bazel.jvmIncBuilder.BazelIncExecutor",
    visibility = ["//visibility:public"],
    runtime_deps = [":jvm-inc-builder-lib"],
)


# todo: temporarily commented
#jvm_library(
#  name = "jvm-inc-builder_test_lib",
#  visibility = ["//visibility:public"],
#  srcs = glob(["testSrc/**/*.kt", "testSrc/**/*.java"], allow_empty = True),
#  associates = [":jvm-inc-builder"],
#  deps = [
#"//java/compiler/instrumentation-util:java-compiler-instrumentationUtil",
#"//jps/jps-builders-6:build-javac-rt",
#"@rules_jvm//dependency-graph",
#"//platform/util-rt",
#"//platform/util-rt:util-rt_test_lib",
#"@lib//:jps-javac-extension",
#"@lib//:jetbrains-annotations",
#"@lib//:mvstore",
#"@lib//:hash4j",
#"@lib//:asm",
#"@lib//:kotlin-metadata",
#"@lib//:caffeine",
#"@lib//:fastutil-min",
#"@lib//:platform-jps-build-jvm_inc_builder-qdox-java-parser",
#"@lib//:junit3",
#"@lib//:kotlinc-kotlin-compiler-common-provided",
#"@lib//:kotlinc-kotlin-compiler-cli-provided",
#  ]
#)

#jvm_test(
#  name = "jvm-inc-builder_test",
#  runtime_deps = [":jvm-inc-builder_test_lib"]
#)

java_library(
  name = "patched-kotlin-compiler-for-bazel",
  visibility = ["//visibility:private"],
  exports = [
    ":kotlin-compiler-2_2_20-dev-2951_http_import",
    ":kotlin-stdlib-jdk8-2_2_20-dev-2951_http_import",
    ":kotlin-stdlib-2_2_20-dev-2951_http_import",
    ":kotlin-stdlib-jdk7-2_2_20-dev-2951_http_import",
    ":kotlin-script-runtime-2_2_20-dev-2951_http_import",
    ":kotlin-reflect-1_6_10_http_import",
    #":kotlinx-coroutines-core-jvm-1_8_0_http_import",
    #":annotations-23_0_0_http_import",
  ],
)

jvm_import(
    name = "kotlin-compiler-2_2_20-dev-2951_http_import",
    jar = "@kotlin-compiler-2_2_20-dev-2951_http//file",
)

jvm_import(
    name = "kotlin-stdlib-jdk8-2_2_20-dev-2951_http_import",
    jar = "@kotlin-stdlib-jdk8-2_2_20-dev-2951_http//file",
)

jvm_import(
    name = "kotlin-stdlib-2_2_20-dev-2951_http_import",
    jar = "@kotlin-stdlib-2_2_20-dev-2951_http//file",
)

jvm_import(
    name = "kotlin-stdlib-jdk7-2_2_20-dev-2951_http_import",
    jar = "@kotlin-stdlib-jdk7-2_2_20-dev-2951_http//file",
)

jvm_import(
    name = "kotlin-script-runtime-2_2_20-dev-2951_http_import",
    jar = "@kotlin-script-runtime-2_2_20-dev-2951_http//file",
)

jvm_import(
    name = "kotlin-reflect-1_6_10_http_import",
    jar = "@kotlin-reflect-1_6_10_http//file",
)

#jvm_import(
#  name = "kotlinx-coroutines-core-jvm-1_8_0_http_import",
#  jar = "@kotlinx-coroutines-core-jvm-1_8_0_http//file"
#)

#jvm_import(
#  name = "annotations-23_0_0_http_import",
#  jar = "@annotations-23_0_0_http//file"
#)

### skip generation section `build intellij.tools.build.bazel.jvmIncBuilder`
